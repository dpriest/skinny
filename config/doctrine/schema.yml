SkinnyList:
  actAs:  
    Timestampable: ~ 
    Sluggable:
      fields: [name]
      indexName: namer_slug
      canUpdate: true
      unique: true
  columns:
    name: { type: string(255), notnull: true}
    private: { type: boolean, notnull: true, default: 0 }
    user_id: { type: integer(4)}
    description: { type: string(1024) }
  relations:
    sfGuardUser: 
      local: user_id
      onDelete: CASCADE
      foreignAlias: lists

SkinnyItem:
  actAs: 
    Timestampable: ~ 
    Sluggable:
      fields: [name]
      indexName: name_slug
      canUpdate: true
      unique: true
    Sortable:
      type:      integer
      length:    1
      indexName: item_sortable
      options:
        unsigned: true
  columns:
    name: { type: string(255) } 
    text: { type: string(4000) }
    list_id: { type: integer, notnull: true }
  relations:
    SkinnyList: { class: SkinnyList, onDelete: CASCADE, local: list_id, foreign: id, foreignAlias: items } 
    SkinnyChecks: { class: sfGuardUser, refClass: SkinnyCheck, local: item_id, foreign: user_id, foreignAlias: SkinnyChecks}
      
SkinnyActivation:
  columns:
    hash:    { type: string(32), notnull: true }
    user_id: { type: integer(4)}
  relations:
    sfGuardUser: 
      local: user_id
      onDelete: CASCADE
      foreignAlias: lists
  indexes:
    hash:  
      fields: [hash]
    user_hash:  
      fields: [user_id, hash]

SkinnyCheck:
  columns:
    user_id: { type: integer(4), primary: true }
    item_id: { type: integer, primary: true }
  relations:
    sfGuardUser:  { onDelete: CASCADE, local: user_id, foreign: id }
    SkinnyItem:   { onDelete: CASCADE, local: item_id, foreign: id }
